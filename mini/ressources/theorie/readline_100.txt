DESCRIPTION (résumé en français)
La fonction readline(const char *prompt) affiche un texte d’invite (prompt) si celui-ci n’est 
pas NULL. Ensuite, elle lit une ligne depuis l’entrée standard en proposant
 des fonctionnalités d’édition (se déplacer dans la ligne, supprimer du texte, etc.) et un 
historique des commandes.

Édition : L’utilisateur peut se déplacer dans la ligne (par ex. flèches), effacer, insérer.
Historique : Les commandes tapées peuvent être stockées pour un réemploi ultérieur (via 
add_history).
Retour : Quand l’utilisateur appuie sur Entrée, readline renvoie la chaîne de caractères 
tapée (sans le caractère de fin de ligne).
Fin de fichier (EOF) ou erreur : readline renvoie NULL si elle ne peut rien lire (EOF) ou s’il y 
a une erreur.
Mémoire : La chaîne renvoyée est allouée dynamiquement (il faut donc la libérer avec free 
quand on n’en a plus besoin).
RETURN VALUE (résumé en français)
Succès : Retourne un pointeur sur une nouvelle chaîne de caractères (contenant la ligne lue).
Échec / Fin de fichier : Retourne NULL.
(Les manuels insistent souvent sur le fait qu’il faut tester ce pointeur contre NULL pour 
détecter si l’utilisateur a appuyé sur Ctrl+D, ou si une erreur s’est produite.)

Idées clés pour utiliser readline dans un minishell :

Affichage d’un prompt

Tu appelles readline("MonPrompt> ").
Veille à afficher un prompt clair pour l’utilisateur.
Gestion de l’historique

Une fois que readline te renvoie la commande, tu peux l’ajouter à l’historique avec 
add_history().
Ça te permettra de rappeler les anciennes commandes avec les flèches.
Détection fin de fichier (EOF)
 
Si l’utilisateur tape Ctrl+D, readline renvoie NULL.
Important pour gérer la sortie proprement (souvent, on termine le minishell si on reçoit NULL).
Libération de mémoire

Le pointeur renvoyé est alloué dynamiquement. Quand tu as fini de traiter la ligne, il faut faire 
un free().
Interaction avec signaux

Dans un minishell, tu gères souvent Ctrl+C et Ctrl+\ (signaux SIGINT, SIGQUIT).
readline capte partiellement ces signaux, mais tu devras peut-être définir un gestionnaire 
(signal handler) spécifique.
Exemple : si tu tapes Ctrl+C, tu voudras probablement nettoyer l’affichage et redonner la main à 
readline.
Boucle principale

En général, tu fais :
Affiche un prompt et lis la ligne avec readline.
Si NULL, tu arrêtes.
Sinon, tu traites la commande (parsage, exécution).
Tu relances la boucle jusqu’à sortir.
Petite astuce

Faire un rl_on_new_line() et rl_replace_line("", 0) (fonctions de la lib readline) peut être utile 
pour réafficher une invite si tu intercepte un signal.
En gros, sache que readline te facilite la lecture de commande (avec édition et historique), mais 
que toi, tu dois gérer le “avant/après” : signaux, allocation mémoire, ajout dans 
l’historique, etc.