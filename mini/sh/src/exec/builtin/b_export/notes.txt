/*
___La ou jen suis le 02.04.2025, 20:20 :___

[ ] Reparer la fonction permettant de creer une variable qui sajoute a lenv, soit add_env_var.
	[x] Reparer exist_already_in_env : identifier correctement les matchs input/name_env
	{
		_ex_: export_T_CMD_ARG.c > exist_already_in_env :     env->name : -USER-      name_var : -USER-
			* ft_strcmp
				jai remplace par ft_strcmp_end 						-> 0 diff
				jai remplace le dernier parametre par 2			 	-> 0 diff
				jai remplace par la vraie fonction (strncmp) 		-> 0 diff
			* la boucle
				elle tourne, cest ok, je voit avec le print pour chaque ligne
			* condition if
				remplacer par == FALSE								-> 0 diff
					note : interessant... la condition nest jamais ni vrai ni fausse
					print result condition							-> diff nombre, neg, pos, et 0 une seule fois !
					remplacer FALSE par == 0						-> 0 diff
						even if == 0, entre pas dans la boucle
						copilot : if (ft_strncmp(env->name, name_var, ft_strlen(name_var)) == 0)
		la reponse : probleme de parenthese... 
	}
	reflexion : si match -> return (env) -> devient current (add_env_var)
		NAME=value
		|				
		|--> same NAME -->	  no value --- nothing
		| 				->	same value --- nothing
		|				->	diff value ->> maj value
		|									
		|
		|								
		|-->  new NAME	-->   no value ->> add NAME
 		|				 ->	with value ->> add NAME=value
		|				 -> empty valu ->> add NAME=""
	
	[x] si diff/new name -> new env_var
	  	[x] malloc t_env (new node)
		[x] creer name
		  	[x] si '=' --> extraire name
			[x] env->name = name (extrait ou pas)
	[ ] si value existe ('=' dans input), remplacer value par new_value	
		[ ] condition : if '=' present dans input	
		[ ] extraire value de input
		[ ] remplacer value par new_value
		[ ] break ; ?

		[ ] fonction extraction name et value ?
			[ ] if strchr '=' found
			  		extract_name
					extract_value
		
		Pour l-instant, si je fais export USER=moni -> il se passe rien. Ca rentre meme pas dans b_export (pas de printf de syntaxe ok)
		jai ajouter des printf dans b_export. probleme resolu avec la condition is valid syntax qui laissait pas passer le '='
		[x] extraire name de NAME=user, actuellement
		  		export_T_CMD_ARG.c > add_env_var : SUCCESS name(USER=moni) extracted from imput(USER=moni) :)
				  ok j'ai demande a copilot... le dernier param etait input - separator. je devait faire l'inverse
				  char *extracted_name = ft_substr(input, 0, separator - input); 105 . 110 . 112 --> 110 - 112 = -2... jai pas compris

		[ ] la new_var s'ajoute a env
[ ]			pour l'instant : (si pas de = dans arg, segv [ ])
					minishell> export ens=dd
					cmd
					export_T_CMD_ARG.c > is_valid_env_var_syntaxe2  SUCCESS is a valid SYNTAX env_var(ens=dd) :)
					export_T_CMD_ARG.c > exist_already_in_env :     no match env_name_linked_list / env_name_input_token 
					export_T_CMD_ARG.c > add_env_var        SUCCESS current malloc
					export_T_CMD_ARG.c > add_env_var :      SUCCESS name(ens) extracted from imput(ens=dd) :)
					export_T_CMD_ARG.c > add_env_var :      current->name(ens)
					export.c > b_export :    export avec arg, input = T_CMD_ARG + T_ARG
					Token type: T_CMD_ARG
					Token type: T_ARG
			le probleme : ne s'affiche pas dans l'env.
			Reflexion : se copie dans un env temporaire ? pour tester je print envlinkedlist directement dans la fonction apres current.name =  extractedname
				t_env *current = NULL; -> = data->env				--> 0 diff
			On dirait que current.name s'enregistre ailleurs... est ce que j'ai lie le new_node a la linkedlist_env ?
				je commente is already_in_env car ca mod le current
					minishell> export _______ewfew
					cmd
					export_T_CMD_ARG.c > is_valid_env_var_syntaxe2  SUCCESS is a valid SYNTAX env_var(_______ewfew) :)
					export_T_CMD_ARG.c > add_env_var         current->name(GJS_DEBUG_TOPICS) devient input(_______ewfew)
					export.c > b_export :    export avec arg, input = T_CMD_ARG + T_ARG
					Token type: T_CMD_ARG
					Token type: T_ARG

					minishell> export
					cmd
					[21]    19943 segmentation fault (core dumped)  ./minishell
				en print liked list dans la boucle, je remarque que le probleme persiste. je commente donc current->next = NULL;
				le probleme vient du fait que... avant, ca imprimait que le premier de la linked_list car je perdais le reste a cause de mon c.next = null
				donc mtn, la mission est d'enregistrer la variable a la fin de la linkedlist afin de ne pas ecraser une var_env
	___ lle___
			[x] add fonctions linked list de la libft dans src et adapter a env afin de pouvoir utiliser les fonctions qui existent deja
				[x]	adapter prototypes + fonction lst -> lle, content -> name + content -> value
				[x] ajouter au .h
				[x]	rename files
		donc je reviens a ma mission et je dois ajouter ma variable a lle. 
			par contre, si elle existe deja, je dois la mettre a jour -> t_env *precis trouve par existe_already
						si elle n'existe PAS, je dois l'ajouter a la fin -> lle_add_back
		je refactorise avec les fonction lle
		ca segv
		cest etrange car USER est identifier
		mais USER=... ne l'est pas
		il faut dabord decouper avec le =.
		jai cree deux fonctions : extracted_name et extracted_value
		
		ca segv de partout...
		bon situation : la variable nexiste pas.
			add_back;
			initialiser name;
			initialiser value;
		jai commenter le max, ca segv ou boucle infinie... je comprends plus PAUSE

		bon... 
		[x]	extracted... ok ! fonctionnent !
			->	printf("export_T_CMD_ARG.c > add_env_var :\n\textracted_name(%s)\textracted_value(%s)\n", extracted_name, extracted_value);

		jai utilise copilot par megarde et ca marche alors je vias continuer ainsi

	[ ] si env_var existe, si je fais export NAME (sans value), il ne se passe rien (actuellement ca segv)

[ ] finaliser condition is_valid_syntax 
  	(accepte '=' (nec pour valider un NAME=value) MAIS si plusieurs '=' ???)
		*/

in case of :
		// if (!current)
		// {
		// 	printf("export_T_CMD_ARG.c > add_env_var \tSUCCESS current malloc\n");
		// 	go_end_of_linked_list(data->env);
		// 	current = malloc(sizeof(t_env));
		// 	if (!current)
		// 	{
		// 		printf("export_T_CMD_ARG.c > add_env_var \tERROR current malloc\n");
		// 		free(current);
		// 		return ;
		// 	}
		// 	current->next = current;
		// 	printf("export_T_CMD_ARG.c > add_env_var \tcurrent->name(%s) after go_end_of_linked_list\n", current->name);
		// }
