/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   cmd.c                                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: monoguei <monoguei@student.lausanne42.c    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/01 13:36:38 by lylrandr          #+#    #+#             */
/*   Updated: 2025/05/12 16:15:12 by monoguei         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../minishell.h"

void wait_all(void)
{
	int status;
	pid_t pid;

	while ((pid = wait(&status)) > 0)
	{
		if (WIFEXITED(status))
			exit_code = WEXITSTATUS(status);
	}
}

int	has_next_cmd(t_input *node)
{
	while (node)
	{
		if (node->type == T_PIPE)
			return (1);
		node = node->next;
	}
	return (0);
}

t_input	*get_next_command(t_input *node)
{
	while (node && node->type != T_PIPE)
		node = node->next;
	if (node && node->type == T_PIPE)
		return (node->next);
	return (NULL);
}

void	child(int prev_pipe, t_input *current, int fd[2], char *env_path, t_data *data)
{
	if (prev_pipe != 0 && !data->stdin_redir)
	{
		dup2(prev_pipe, 0);
		close(prev_pipe);
	}
	if (has_next_cmd(current) && !data->stdout_redir)
	{
		dup2(fd[1], 1);
		close(fd[0]);
		close(fd[1]);
	}
	if (has_redirection(current))
	{
		validate_redirections(current);
		redir(current, data);
	}
	exec(current, data, env_path);
}

void	parent(int *prev_pipe, t_input **current, int fd[2], t_data **data)
{
	(void)data;
	if (*prev_pipe != 0)
		close(*prev_pipe);
	if (has_next_cmd(*current))
	{
		close(fd[1]);
		*prev_pipe = fd[0];
	}
	else if (fd[0])
		close(fd[0]);
	*current = get_next_command(*current);
}

void	exec_pipe(t_input *head, char *env_path, t_data *data)
{
	int		fd[2];
	int		prev_pipe;
	pid_t	pid;
	t_input	*current;

	prev_pipe = 0;
	current = head;
	fd[0] = 0;
	fd[1] = 0;
	while (current)
	{
		if (has_next_cmd(current))
			pipe(fd);
		if (is_builtin(current->token) && is_parent_builtin(current->token) && is_safe_to_exec_in_parent(current))
		{
			kind_of_token(data, current);
			current = get_next_command(current);
			continue;
		}
		pid = fork();
		if (pid == 0)
			child(prev_pipe, current, fd, env_path, data);// ici cest une enfant
		else
			parent(&prev_pipe, &current, fd, &data);
	}
	wait_all();
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   exec.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lylrandr <lylrandr@student.42lausanne.ch>  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/01 13:36:38 by lylrandr          #+#    #+#             */
/*   Updated: 2025/05/11 19:34:50 by lylrandr         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../minishell.h"

char	**build_cmd_arg(t_input *token)
{
	t_input	*tmp;
	int		i = 0;
	char	**cmd;

	tmp = token;
	while (tmp && tmp->type != T_PIPE)
	{
		if (tmp->type != T_OP && (tmp->prev == NULL || tmp->prev->type != T_OP))
			i++;
		tmp = tmp->next;
	}
	cmd = malloc(sizeof(char *) * (i + 1));
	if (!cmd)
		return (NULL);
	tmp = token;
	i = 0;
	while (tmp && tmp->type != T_PIPE)
	{
		if (tmp->type != T_OP && (tmp->prev == NULL || tmp->prev->type != T_OP))
		{
			cmd[i] = ft_strdup(tmp->token);
			i++;
		}
		tmp = tmp->next;
	}
	cmd[i] = NULL;
	return (cmd);
}


void	exec(t_input *current, t_data *data, char *env_path)
{
	char	**cmd;
	char	*cmd_path;

	if (!current)
		return;
	if (is_builtin(current->token))
	{
		kind_of_token(data, current);
		if (current && current->next && current->next->next && current->next->next->type == T_PIPE)
		{
			current = current->next;
			exec(current, data, env_path);
		}
		else
			exit(0);
	}
	cmd = build_cmd_arg(current);
	cmd_path = get_path(env_path, cmd[0]);
	if (!cmd_path)
	{
		ft_printf_stderr("minishell: command not found: %s\n", cmd[0]);
		exit(127);
	}
	execve(cmd_path, cmd, NULL);
	printf("minishell: command not found: %s\n", cmd[0]);
	exit(127);
}

int	count_cmd(t_input *head)
{
	int count = 0;
	t_input *curr = head;

	while (curr)
	{
		if (curr->type == T_CMD || curr->type == T_CMD_ARG)
		{
			count++;
			while (curr && curr->type != T_PIPE)
				curr = curr->next;
		}
		else
			curr = curr->next;
	}
	return (count);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   redirections2.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lylrandr <lylrandr@student.42lausanne.ch>  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/06 14:18:44 by lylrandr          #+#    #+#             */
/*   Updated: 2025/05/06 16:26:36 by lylrandr         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../minishell.h"

bool	has_redirection(t_input *current)
{
	while (current)
	{
		if (current->type == T_OP)
			return true;
		current = current->next;
	}
	return false;
}

bool	is_safe_to_exec_in_parent(t_input *current)
{
	t_input *tmp = current;

	if (!tmp)
		return (false);
	while (tmp)
	{
		if (tmp->type == T_PIPE || tmp->type == T_OP)
			return (false);
		tmp = tmp->next;
	}
	return (true);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   redirections.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lylrandr <lylrandr@student.42lausanne.ch>  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 14:38:25 by lylrandr          #+#    #+#             */
/*   Updated: 2025/05/06 17:10:15 by lylrandr         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../minishell.h"

void	redir(t_input *current, t_data *data)
{
	while (current)
	{
		if (current->type == T_OP)
		{
			if (!current->token || !current->next || !current->next->token)
				break ;
			if (!ft_strncmp(current->token, ">>", 3))
				heredoc_append(current, data);
			else if (!ft_strncmp(current->token, "<<", 3))
				heredoc(current);
			else if (!ft_strncmp(current->token, ">", 2)
				|| !ft_strncmp(current->token, "<", 2))
				simple_redir(current, data);
		}
		current = current->next;
	}
}

void	heredoc(t_input *current)
{
	int		hd_pipe[2];
	char	*del;
	char	*line;

	del = current->next->token;
	pipe(hd_pipe);
	while (1)
	{
		line = readline("> ");
		if ((ft_strlen(line) != 0) && ft_strncmp(line, del,
				ft_strlen(line)) == 0)
			break ;
		write(hd_pipe[1], line, ft_strlen(line));
		write(hd_pipe[1], "\n", 1);
		free(line);
	}
	close(hd_pipe[1]);
	dup2(hd_pipe[0], 0);
	close(hd_pipe[0]);
}

void	simple_redir(t_input *current, t_data *data)
{
	int	fd;

	if ((ft_strncmp(current->token, ">", 1) == 0) && current->next)
	{
		fd = open(current->next->token, O_WRONLY | O_CREAT | O_TRUNC, 0644);
		dup2(fd, 1);
		close(fd);
		data->stdout_redir = 1;
	}
	else if ((ft_strncmp(current->token, "<", 1) == 0) && current->next)
	{
		fd = open(current->next->token, O_RDONLY);
		dup2(fd, 0);
		close(fd);
		data->stdin_redir = 1;
	}
}

void	heredoc_append(t_input *current, t_data *data)
{
	int	fd;

	if ((ft_strncmp(current->token, ">>", 2) == 0) && current->next)
	{
		fd = open(current->next->token, O_WRONLY | O_CREAT | O_APPEND, 0644);
		dup2(fd, 1);
		close(fd);
		data->stdout_redir = 1;
	}
	else
		heredoc(current);
}

void	validate_redirections(t_input *current)
{
	int	fd;

	while (current)
	{
		if (current->type == T_OP && current->next)
		{
			if (!ft_strncmp(current->token, ">>", 3)
				|| !ft_strncmp(current->token, ">", 2))
				fd = open(current->next->token, O_WRONLY | O_CREAT | O_APPEND,
						0644);
			else if (!ft_strncmp(current->token, "<", 2))
				fd = open(current->next->token, O_RDONLY);
			else if (!ft_strncmp(current->token, "<<", 3))
			{
				current = current->next;
				continue ;
			}
			if (fd == -1)
			{
				ft_printf_stderr(current->next->token);
				perror(current->next->token);
				exit_code = 1;
				exit(1);
			}
			close(fd);
		}
		current = current->next;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   utils_exec.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lylrandr <lylrandr@student.42lausanne.ch>  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 18:12:43 by lylrandr          #+#    #+#             */
/*   Updated: 2025/04/23 17:14:56 by lylrandr         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../../minishell.h"

int	is_parent_builtin(char *token)
{
	if (!ft_strncmp(token, "cd", 3)
		|| !ft_strncmp(token, "export", 7)
		|| !ft_strncmp(token, "unset", 6)
		|| !ft_strncmp(token, "exit", 5))
		return (1);
	return (0);
}

